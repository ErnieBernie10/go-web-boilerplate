// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package database

import (
	"context"
	"database/sql"
)

const getUserByEmail = `-- name: GetUserByEmail :one
select id, email, password_hash, created_at, updated_at, name, provider, provider_user_id
from app_user
where email like $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (AppUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i AppUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Provider,
		&i.ProviderUserID,
	)
	return i, err
}

const register = `-- name: Register :exec
insert into app_user (email, password_hash)
values ($1, $2)
`

type RegisterParams struct {
	Email        string
	PasswordHash sql.NullString
}

func (q *Queries) Register(ctx context.Context, arg RegisterParams) error {
	_, err := q.db.ExecContext(ctx, register, arg.Email, arg.PasswordHash)
	return err
}
