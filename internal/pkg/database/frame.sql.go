// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: frame.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const deleteFrame = `-- name: DeleteFrame :exec
delete from frame
where id = $1
  and user_id = $2
`

type DeleteFrameParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteFrame(ctx context.Context, arg DeleteFrameParams) error {
	_, err := q.db.ExecContext(ctx, deleteFrame, arg.ID, arg.UserID)
	return err
}

const getFrame = `-- name: GetFrame :one
select frame.id, title, description, frame.created_at, frame.modified_at, user_id, frame_status, content_type, content, file_id, f.id, file_name, f.created_at, f.modified_at
from frame
  join file f on f.id = frame.file_id
where frame.id = $1
  and user_id = $2
`

type GetFrameParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

type GetFrameRow struct {
	ID           uuid.UUID
	Title        string
	Description  string
	CreatedAt    time.Time
	ModifiedAt   time.Time
	UserID       uuid.UUID
	FrameStatus  int16
	ContentType  int16
	Content      string
	FileID       uuid.NullUUID
	ID_2         uuid.UUID
	FileName     sql.NullString
	CreatedAt_2  time.Time
	ModifiedAt_2 time.Time
}

func (q *Queries) GetFrame(ctx context.Context, arg GetFrameParams) (GetFrameRow, error) {
	row := q.db.QueryRowContext(ctx, getFrame, arg.ID, arg.UserID)
	var i GetFrameRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.UserID,
		&i.FrameStatus,
		&i.ContentType,
		&i.Content,
		&i.FileID,
		&i.ID_2,
		&i.FileName,
		&i.CreatedAt_2,
		&i.ModifiedAt_2,
	)
	return i, err
}

const getFrames = `-- name: GetFrames :many
select frame.id, title, description, frame.created_at, frame.modified_at, user_id, frame_status, content_type, content, file_id, f.id, file_name, f.created_at, f.modified_at
from frame
    join file f on f.id = frame.file_id
where user_id = $1
`

type GetFramesRow struct {
	ID           uuid.UUID
	Title        string
	Description  string
	CreatedAt    time.Time
	ModifiedAt   time.Time
	UserID       uuid.UUID
	FrameStatus  int16
	ContentType  int16
	Content      string
	FileID       uuid.NullUUID
	ID_2         uuid.UUID
	FileName     sql.NullString
	CreatedAt_2  time.Time
	ModifiedAt_2 time.Time
}

func (q *Queries) GetFrames(ctx context.Context, userID uuid.UUID) ([]GetFramesRow, error) {
	rows, err := q.db.QueryContext(ctx, getFrames, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFramesRow
	for rows.Next() {
		var i GetFramesRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.UserID,
			&i.FrameStatus,
			&i.ContentType,
			&i.Content,
			&i.FileID,
			&i.ID_2,
			&i.FileName,
			&i.CreatedAt_2,
			&i.ModifiedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveFrame = `-- name: SaveFrame :one
insert into frame (
    id,
    title,
    description,
    created_at,
    user_id,
    frame_status,
    file_id
  )
values ($1, $2, $3, NOW(), $4, $5, $6) on conflict (id) DO
UPDATE
set title = $2,
  description = $3,
  user_id = $4,
  frame_status = $5,
  file_id = $6,
  modified_at = NOW()
RETURNING id
`

type SaveFrameParams struct {
	ID          uuid.UUID
	Title       string
	Description string
	UserID      uuid.UUID
	FrameStatus int16
	FileID      uuid.NullUUID
}

func (q *Queries) SaveFrame(ctx context.Context, arg SaveFrameParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, saveFrame,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.UserID,
		arg.FrameStatus,
		arg.FileID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
